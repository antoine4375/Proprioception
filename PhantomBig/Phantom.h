#include "Winsock2.h"
#include <HD/hd.h>
#include <HDU/hduError.h>
#include <HDU/hduVector.h>
#include <Eigen/Dense>

#include <boost/shared_ptr.hpp>
#include <cstdlib>

#include <windows.h>
#include <winbase.h>

#include <random>

#include <sstream>

#define K_FEEDBACK		0.2
#define DEVICE_NAME_1 "BIG"

typedef struct _PACK{
	hduVector3Dd position;
	hduVector3Dd force;
	hduVector3Dd prev;
}PACK;

HHD phantomId_1;

hduVector3Dd init_position,init_angles,position;
bool Phantom_Started;
LARGE_INTEGER sPos, ePos, freq;
__int64 ms_interval = 0;
int omni_cnt;
int m1Buttons;PACK mst;

double delay_data[3][1000];
int delay_count;


bool animation_flag;
bool first_bnt;
bool button_flag;
int target_count;
bool positioning_flag;
double init_positioning[3];
double save_x,save_y;

double carray[360] = {0.113429544675454,
0.113403742795511,
0.113375475278489,
0.113345265849878,
0.113313638235168,
0.113281116159850,
0.113248223349414,
0.113215483529350,
0.113183420425148,
0.113152557762299,
0.113123419266293,
0.113096528662621,
0.113072409676771,
0.113051586034236,
0.113034581460504,
0.113021919681066,
0.113014124421413,
0.113012396338529,
0.113141115832488,
0.113489474131398,
0.114053662431901,
0.114829871930637,
0.115814293824246,
0.117003119309368,
0.118392539582644,
0.119978745840715,
0.121757929280220,
0.123726281097800,
0.125879992490096,
0.128215254653747,
0.130728258785394,
0.133415196081678,
0.136272257739239,
0.139295634954717,
0.142481518924752,
0.145826100845986,
0.149325571915058,
0.152976123328609,
0.156773946283278,
0.163238296300138,
0.174312477488051,
0.188994612383027,
0.206282637833700,
0.225174490688704,
0.244668107796673,
0.263761426006242,
0.281452382166044,
0.296738913124714,
0.308618955730886,
0.316090446833194,
0.318213004536626,
0.317480773384176,
0.315672172443491,
0.312842848244613,
0.309048447317579,
0.304344616192431,
0.298787001399207,
0.292431249467948,
0.285333006928692,
0.277547920311480,
0.269131636146352,
0.260139800963346,
0.250628061292502,
0.240652063663861,
0.230267454607462,
0.219529880653343,
0.208494988331546,
0.197218424172110,
0.185755834705074,
0.174162866460478,
0.162495165968361,
0.150808379758764,
0.139158154361725,
0.127600136307285,
0.116189972125484,
0.104983308346360,
0.0940357914999531,
0.0834030681163035,
0.0731407847254507,
0.0633045878574342,
0.0539501240422937,
0.0451330398100688,
0.0369089816907992,
0.0293335962145244,
0.0224625299112843,
0.0163514293111182,
0.0110559409440660,
0.00663171134016715,
0.00313438702946150,
0.000619614541988614,
-0.000856959592212029,
-0.00122232403571086,
0.000361518107387292,
0.00410769395232823,
0.00970456767565181,
0.0168405034538979,
0.0252038654636063,
0.0344830178813169,
0.0443663248835695,
0.0545421506469040,
0.0646988593478603,
0.0745248151629781,
0.0837083822687974,
0.0919379248418579,
0.0989018070586996,
0.104288393095862,
0.107786047129886,
0.109449003577979,
0.110750723213878,
0.111897646205102,
0.112905578160527,
0.113790324689031,
0.114567691399490,
0.115253483900781,
0.115863507801780,
0.116413568711366,
0.116919472238414,
0.117397023991801,
0.117862029580404,
0.118330294613100,
0.118817624698766,
0.119339825446278,
0.119912702464513,
0.120552061362349,
0.121273707748661,
0.122093447232327,
0.123027085422224,
0.124090427927227,
0.125299280356216,
0.126768557306810,
0.129242809449065,
0.132748946958974,
0.137135913146396,
0.142252651321188,
0.147948104793210,
0.154071216872318,
0.160470930868373,
0.166996190091231,
0.173495937850750,
0.179819117456790,
0.185814672219209,
0.191331545447864,
0.196218680452614,
0.200325020543318,
0.203499509029833,
0.205591089222017,
0.206448704429729,
0.206111547297232,
0.204851891482508,
0.202709719700365,
0.199720850281570,
0.195921101556890,
0.191346291857090,
0.186032239512938,
0.180014762855201,
0.173329680214644,
0.166012809922035,
0.158099970308139,
0.149626979703725,
0.140629656439557,
0.131143818846403,
0.121205285255030,
0.110849873996204,
0.100113403400691,
0.0890316917992583,
0.0776405575226724,
0.0659758189016998,
0.0540732942671071,
0.0419688019496610,
0.0296981602801279,
0.0172971875892745,
0.00480170220786734,
-0.00775247753332694,
-0.0203295333035418,
-0.0328936467720106,
-0.0454089996079667,
-0.0578397734806437,
-0.0701501500592748,
-0.0823043110130936,
-0.0942664380113333,
-0.106000712723228,
-0.117471316818010,
-0.128642431964913,
-0.139478239833171,
-0.149942922092017,
-0.160000660410684,
-0.169615636458407,
-0.178752031904417,
-0.187374028417950,
-0.195445807668237,
-0.202931551324513,
-0.209795441056011,
-0.216001658531965,
-0.221514385421607,
-0.226410881727841,
-0.231261421110975,
-0.236137344360630,
-0.241023363459230,
-0.245904190389201,
-0.250764537132970,
-0.255589115672962,
-0.260362637991605,
-0.265069816071323,
-0.269695361894543,
-0.274223987443690,
-0.278640404701192,
-0.282929325649474,
-0.287075462270962,
-0.291063526548082,
-0.294878230463261,
-0.298504285998923,
-0.301926405137496,
-0.305129299861406,
-0.308097682153078,
-0.310816263994939,
-0.313269757369415,
-0.315442874258931,
-0.317320326645914,
-0.318886826512790,
-0.320127085841985,
-0.321025816615925,
-0.321567730817036,
-0.321736502341798,
-0.321157230953521,
-0.319589464688028,
-0.317111449164089,
-0.313801430000473,
-0.309737652815953,
-0.304998363229297,
-0.299661806859277,
-0.293806229324662,
-0.287509876244223,
-0.280850993236731,
-0.273907825920955,
-0.266758619915666,
-0.259481620839634,
-0.252155074311630,
-0.244857225950424,
-0.237666321374786,
-0.229932918607969,
-0.220601323958679,
-0.209920966593760,
-0.198163065565672,
-0.185598839926876,
-0.172499508729833,
-0.159136291027004,
-0.145780405870848,
-0.132703072313827,
-0.120175509408401,
-0.108468936207031,
-0.0978545717621777,
-0.0886036351263017,
-0.0809873453518637,
-0.0752769214913242,
-0.0711643842048747,
-0.0672309341076880,
-0.0634038342586799,
-0.0596935051094667,
-0.0561103671116648,
-0.0526648407168904,
-0.0493673463767600,
-0.0462283045428898,
-0.0432581356668963,
-0.0404672602003956,
-0.0378660985950042,
-0.0354650713023385,
-0.0332745987740146,
-0.0313051014616491,
-0.0295669998168581,
-0.0280707142912581,
-0.0268266653364654,
-0.0258452734040963,
-0.0251369589457671,
-0.0247121424130943,
-0.0245820261653100,
-0.0249559264594447,
-0.0259501491682434,
-0.0275049458883210,
-0.0295605682162925,
-0.0320572677487729,
-0.0349352960823771,
-0.0381349048137202,
-0.0415963455394171,
-0.0452598698560828,
-0.0490657293603322,
-0.0529541756487804,
-0.0568654603180423,
-0.0607398349647330,
-0.0645175511854673,
-0.0681388605768603,
-0.0715440147355269,
-0.0746732652580822,
-0.0774668637411411,
-0.0798650617813186,
-0.0818081109752296,
-0.0832362629194892,
-0.0840897692107123,
-0.0842868753929499,
-0.0828735765667701,
-0.0795421872873346,
-0.0745349124349072,
-0.0680939568897519,
-0.0604615255321326,
-0.0518798232423133,
-0.0425910549005579,
-0.0328374253871302,
-0.0228611395822942,
-0.0129044023663139,
-0.00320941861945308,
0.00598160677802422,
0.0144264689458541,
0.0218829630037727,
0.0281088840715160,
0.0328620272688202,
0.0359005264786017,
0.0379273517707096,
0.0397524406908315,
0.0413953476423006,
0.0428756270284504,
0.0442128332526142,
0.0454265207181252,
0.0465362438283170,
0.0475615569865228,
0.0485220145960759,
0.0494371710603097,
0.0503265807825576,
0.0512097981661529,
0.0521063776144289,
0.0530358735307191,
0.0540178403183566,
0.0550718323806749,
0.0562174041210074,
0.0574741099426873,
0.0588615042490481,
0.0603991414434230,
0.0620915984221633,
0.0639013446298594,
0.0658218686796148,
0.0678495196141689,
0.0699806464762613,
0.0722115983086315,
0.0745387241540190,
0.0769583730551631,
0.0794668940548036,
0.0820606361956797,
0.0847359485205311,
0.0874891800720972,
0.0903166798931176,
0.0932147970263316,
0.0961798805144789,
0.0992082794002989,
0.102296342726531,
0.105440419535915,
0.108636858871190,
0.111882009775096,
0.115172221290372,
0.118503842459757,
0.121873222325992,
0.125276709931815,
0.128710654319967};
HDCallbackCode HDCALLBACK DeviceCalibrate(void *pUserData);
HDCallbackCode HDCALLBACK PhantomDevice(void *pUserData);
inline void Phantom1();
void Omni_Calibrate(void);
void Omni_Init(void);
void Omni_Start(void);
void LogData();

void Omni_Init(void)
{
	phantomId_1 = hdInitDevice(DEVICE_NAME_1);
    hdEnable(HD_FORCE_OUTPUT);

    hdStartScheduler();
    hdMakeCurrentDevice(phantomId_1);

    for (int i = 0; i < 3; ++i)
    {
    	init_position[i] = 0.0;
    	init_angles[i] = 0.0;
    	mst.position[i] = 0.0;
    	mst.prev[i] = 0.0;
    	mst.force[i] = 0.0;
    	position[i] = 0.0;

    	for (int j = 0; j < 1000; ++j)
    	{
    		delay_data[i][j] = 0.0;
    	}
    }

    omni_cnt = 0;
    Phantom_Started = false;
    animation_flag = false;
    first_bnt = false;
    button_flag = false;
    target_count = 0;
	positioning_flag = false;
	init_positioning[0] = -400;
	init_positioning[1] = 200;
	init_positioning[2] = -250;
	delay_count = 0;

	save_x = 0.0;
	save_y = 0.0;
}

void Omni_Calibrate(void)
{
	if (!Phantom_Started){

		hdScheduleSynchronous(DeviceCalibrate, position, HD_MIN_SCHEDULER_PRIORITY);
	}
}

void Omni_Start(void) 
{
	if (!Phantom_Started){	
		Phantom_Started=true;
		hdScheduleAsynchronous(PhantomDevice, position, HD_DEFAULT_SCHEDULER_PRIORITY);
	}
}

HDCallbackCode HDCALLBACK DeviceCalibrate(void *pUserData)
{
   hdBeginFrame(phantomId_1);
   hdGetDoublev(HD_CURRENT_POSITION,init_position);
   hdGetDoublev(HD_CURRENT_GIMBAL_ANGLES, init_angles);
   hdEndFrame(hdGetCurrentDevice());
   
   return HD_CALLBACK_DONE;
}

HDCallbackCode HDCALLBACK PhantomDevice(void *pUserData)
{   
	if (omni_cnt <2000)
	{
		omni_cnt++;
	} 
	else{
		QueryPerformanceFrequency(&freq); 
		omni_cnt++;
		QueryPerformanceCounter(&sPos);
		ms_interval = (sPos.QuadPart - ePos.QuadPart)/(freq.QuadPart/1000000);
		ePos = sPos;
			
		//master
		Phantom1();
	}
	return HD_CALLBACK_CONTINUE;
}

inline void Phantom1(){
	hdBeginFrame(phantomId_1);
		
	hdGetIntegerv(HD_CURRENT_BUTTONS, &m1Buttons);

	if (m1Buttons && HD_DEVICE_BUTTON_1)
	{
		if (!button_flag)
		{	
			button_flag = true;

			animation_flag = true;
			target_count++;

			if (target_count > 8)
			{
				target_count = 0;
			}
			
			if (!first_bnt)
			{
				first_bnt = true;
				positioning_flag = false;
				for (int i = 0; i < 3; ++i)	init_position[i] = mst.position[i];
			}
		}
	}
	else
	{
		if (button_flag)
		{
			button_flag = false;
		}
	}

	for (int i = 0; i < 3; ++i)	mst.prev[i]=mst.position[i];
					
	hdGetDoublev(HD_CURRENT_POSITION,mst.position);

	for (int i = 0; i < 3; ++i)	mst.position[i]-=init_position[i];
	
	if (first_bnt)
	{
		for (int i = 0; i < 3; ++i)	delay_data[i][delay_count] = mst.position[i];
		delay_count++;
		if (delay_count > 999)	delay_count = 0;

		mst.force[0] = 0;
		mst.force[1] = 0;
		mst.force[2] = -K_FEEDBACK*mst.position[2];
		hdSetDoublev(HD_CURRENT_FORCE, mst.force);
	}else if(positioning_flag)
	{
		mst.force[0] = K_FEEDBACK*(init_positioning[0]-mst.position[0]);
		mst.force[1] = K_FEEDBACK*(init_positioning[1]-mst.position[1]);
		mst.force[2] = K_FEEDBACK*(init_positioning[2]-mst.position[2]);
		hdSetDoublev(HD_CURRENT_FORCE, mst.force);
	}
	hdEndFrame(hdGetCurrentDevice());
}

